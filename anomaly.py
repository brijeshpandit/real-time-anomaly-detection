# importing necessary libraries
import os
import random
import time
from datetime import datetime
from joblib import load
import logging
import matplotlib.pyplot as plt
import numpy as np
from logger import logger

# importing setting parameters
from settings import DELAY, OUTLIERS_GEN_PROB, VISUALIZATION

# creating log file
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s: %(message)s')

# initializing log folder and file prefix
logger("logs","anomaly")

# empty list for storing incoming data for visualization
data_ls = []

def anomaly_dect():
    _id = 0
    legend_added = False

    if VISUALIZATION:
        # initalizing plot essentials using matplotlib
        fig = plt.figure(figsize=(8,4))
        ax = fig.add_subplot()
        ax.set_facecolor('#011627')
        fig.suptitle('Real Time Anomaly Detection')
        fig.show()
    
    while True:
        # Generating some abnormal observations
        if random.random() <= OUTLIERS_GEN_PROB:
            X_test = np.random.uniform(low=-4, high=4, size=(1, 1))
        else:
            X = 0.3 * np.random.randn(1, 1)
            X_test = (X + np.random.choice(a=[2, -2], size=1, p=[0.5, 0.5]))

        X_test = np.round(X_test, 3).tolist()       # rounding to 3 decimals

        current_time = datetime.utcnow().isoformat()

        record = {"id": _id, "data": X_test, "current_time": current_time}
        print(f"Incoming: {record}")        # Tracking the incoming data from the data stream

        try:
            # loading the model file generated by the model_prod.py
            model_path = os.path.abspath("model_isolation_forest.joblib")
            clf = load(model_path)
        except:
            # If model is not created or not found, script will terminate        
            logging.warning(f"Model file not found")
            print(f'Model file not available')
            break
            
        data = record['data']               # reading the data from the records        
        data_ls.append(data[0][0])          # storing the data for visualization
        prediction = clf.predict(data)      # predicting using the model

        # plotting the incoming data
        if VISUALIZATION:
            ax.plot(data_ls,color='#41EAD4',label='Data Stream')                     
            ax.set_xlabel('Record id')
            ax.set_ylabel('Data')
            ax.grid(True, linestyle='--', alpha=0.2,)                
            if _id==0:
                ax.legend(loc='upper left')
            fig.canvas.draw()
            ax.set_xlim(left=0, right=_id+2) 
            
        
        if prediction[0] == -1:
            score = clf.score_samples(data)
            record["score"] = np.round(score, 3).tolist()
            if VISUALIZATION:
                # plotting the detected anamoly
                ax.scatter(_id,data_ls[_id],color='#fc0d1b',linewidth=4, label='Anomaly')
                
                if not legend_added:
                    handles, labels = plt.gca().get_legend_handles_labels()
                    handles = [handles[0],handles[-1]]
                    labels = [labels[0],labels[-1]]
                    ax.legend(handles= handles, labels=labels, loc='upper left')
                    legend_added = True

            logging.info(f"Anomaly Detected : {record}")
            print(f'Anamoly Detected : {record}')
            
        _id += 1
        
        if VISUALIZATION:
            plt.pause(DELAY)
        else:
            time.sleep(DELAY)
    plt.show()